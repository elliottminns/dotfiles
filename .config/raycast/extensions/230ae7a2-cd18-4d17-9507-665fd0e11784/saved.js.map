{
  "version": 3,
  "sources": ["../src/saved.tsx", "../src/actions/index.tsx", "../src/actions/copy.tsx", "../src/actions/preferences.tsx", "../src/hooks/useSavedChat.tsx", "../src/views/answer-detail.tsx"],
  "sourcesContent": ["import { ActionPanel, Icon, List } from \"@raycast/api\";\nimport { useState } from \"react\";\nimport { DestructiveAction } from \"./actions\";\nimport { CopyActionSection } from \"./actions/copy\";\nimport { PreferencesActionSection } from \"./actions/preferences\";\nimport { useSavedChat } from \"./hooks/useSavedChat\";\nimport { Chat } from \"./type\";\nimport { AnswerDetailView } from \"./views/answer-detail\";\n\nexport default function Saved() {\n  const savedChat = useSavedChat();\n  const [searchText, setSearchText] = useState<string>(\"\");\n  const [selectedAnswerId, setSelectedAnswerId] = useState<string | null>(null);\n\n  const getActionPanel = (chat: Chat) => (\n    <ActionPanel>\n      <CopyActionSection answer={chat.answer} question={chat.question} />\n      <ActionPanel.Section title=\"Output\"></ActionPanel.Section>\n      <ActionPanel.Section title=\"Delete\">\n        <DestructiveAction\n          title=\"Unsave\"\n          dialog={{\n            title: \"Are you sure you want to unsave this answer from your collection?\",\n          }}\n          onAction={() => savedChat.remove(chat)}\n        />\n        <DestructiveAction\n          title=\"Clear All\"\n          dialog={{\n            title: \"Are you sure you want to clear all your saved answer from your collection?\",\n          }}\n          onAction={() => savedChat.clear()}\n          shortcut={{ modifiers: [\"cmd\", \"shift\"], key: \"delete\" }}\n        />\n      </ActionPanel.Section>\n      <PreferencesActionSection />\n    </ActionPanel>\n  );\n\n  const sortedSavedChats = savedChat.data.sort(\n    (a, b) => new Date(b.saved_at ?? 0).getTime() - new Date(a.saved_at ?? 0).getTime()\n  );\n\n  const filteredSavedChats = sortedSavedChats\n    .filter((value, index, self) => index === self.findIndex((answer) => answer.id === value.id))\n    .filter((answer) => {\n      if (searchText === \"\") {\n        return true;\n      }\n      return (\n        answer.question.toLowerCase().includes(searchText.toLowerCase()) ||\n        answer.answer.toLowerCase().includes(searchText.toLowerCase())\n      );\n    });\n\n  return (\n    <List\n      isShowingDetail={filteredSavedChats.length === 0 ? false : true}\n      isLoading={savedChat.isLoading}\n      filtering={false}\n      throttle={false}\n      navigationTitle={\"Saved Answers\"}\n      selectedItemId={selectedAnswerId || undefined}\n      onSelectionChange={(id) => {\n        if (id !== selectedAnswerId) {\n          setSelectedAnswerId(id);\n        }\n      }}\n      searchBarPlaceholder=\"Search saved answer/question...\"\n      searchText={searchText}\n      onSearchTextChange={setSearchText}\n    >\n      {savedChat.data.length === 0 ? (\n        <List.EmptyView\n          title=\"No saved answers\"\n          description=\"Save generated question with \u2318 + S shortcut\"\n          icon={Icon.Stars}\n        />\n      ) : (\n        <List.Section title=\"Saved\" subtitle={filteredSavedChats.length.toLocaleString()}>\n          {filteredSavedChats.map((chat) => (\n            <List.Item\n              id={chat.id}\n              key={chat.id}\n              title={chat.question}\n              accessories={[{ text: new Date(chat.created_at ?? 0).toLocaleDateString() }]}\n              detail={<AnswerDetailView chat={chat} />}\n              actions={chat && selectedAnswerId === chat.id ? getActionPanel(chat) : undefined}\n            />\n          ))}\n        </List.Section>\n      )}\n    </List>\n  );\n}\n", "import { Action, Alert, confirmAlert, Icon, Image, Keyboard } from \"@raycast/api\";\n\nexport const PrimaryAction = ({ title, onAction }: { title: string; onAction: () => void }) => (\n  <Action title={title} icon={Icon.ArrowRight} onAction={onAction} />\n);\n\nexport const PinAction = ({\n  title,\n  isPinned,\n  onAction,\n}: {\n  title: string;\n  isPinned: boolean;\n  onAction: () => void;\n}) => <Action title={title} icon={isPinned ? Icon.PinDisabled : Icon.Pin} onAction={onAction} />;\n\nexport const CopyToClipboardAction = (props: Action.CopyToClipboard.Props) => (\n  <Action.CopyToClipboard icon={Icon.CopyClipboard} {...props} />\n);\n\nexport const SaveAnswerAction = ({ onAction }: { onAction: () => void }) => (\n  <Action icon={Icon.Star} title=\"Save Answer\" onAction={onAction} shortcut={{ modifiers: [\"cmd\"], key: \"s\" }} />\n);\n\nexport const SaveAsSnippetAction = ({ text, name }: { text: string; name: string }) => (\n  <Action.CreateSnippet\n    icon={Icon.Snippets}\n    title=\"Save as a Snippet\"\n    snippet={{ text, name }}\n    shortcut={{ modifiers: [\"cmd\"], key: \"n\" }}\n  />\n);\n\nexport const DestructiveAction = ({\n  icon = Icon.Trash,\n  title,\n  dialog,\n  onAction,\n  shortcut = { modifiers: [\"cmd\"], key: \"d\" },\n}: {\n  icon?: Image.ImageLike;\n  title: string;\n  dialog: { title?: string; message?: string; primaryButton?: string };\n  onAction: () => void;\n  shortcut?: Keyboard.Shortcut;\n}) => (\n  <Action\n    style={Action.Style.Destructive}\n    icon={icon}\n    title={title}\n    onAction={async () => {\n      await confirmAlert({\n        title: dialog.title ?? title,\n        message: dialog.message ?? \"This action cannot be undone\",\n        icon,\n        primaryAction: {\n          title: dialog.primaryButton ?? title,\n          style: Alert.ActionStyle.Destructive,\n          onAction,\n        },\n      });\n    }}\n    shortcut={shortcut}\n  />\n);\n", "import { ActionPanel } from \"@raycast/api\";\nimport { CopyToClipboardAction } from \"./index\";\n\nexport const CopyActionSection = ({ question, answer }: { question: string; answer: string }) => (\n  <ActionPanel.Section title=\"Copy\">\n    {answer ? <CopyToClipboardAction title=\"Copy Answer\" content={answer} /> : null}\n    {question ? <CopyToClipboardAction title=\"Copy Question\" content={question} /> : null}\n  </ActionPanel.Section>\n);\n", "import { Action, ActionPanel, Icon, openExtensionPreferences } from \"@raycast/api\";\n\nexport const PreferencesActionSection = () => (\n  <ActionPanel.Section title=\"Preferences\">\n    <Action icon={Icon.Gear} title=\"Open Extension Preferences\" onAction={openExtensionPreferences} />\n  </ActionPanel.Section>\n);\n", "import { LocalStorage, showToast, Toast } from \"@raycast/api\";\nimport { useCallback, useEffect, useMemo, useState } from \"react\";\nimport { Chat, SavedChat, SavedChatHook } from \"../type\";\n\nexport function useSavedChat(): SavedChatHook {\n  const [data, setData] = useState<SavedChat[]>([]);\n  const [isLoading, setLoading] = useState<boolean>(true);\n\n  useEffect(() => {\n    (async () => {\n      const storedSavedChats = await LocalStorage.getItem<string>(\"savedChats\");\n\n      if (storedSavedChats) {\n        setData((previous) => [...previous, ...JSON.parse(storedSavedChats)]);\n        setLoading(false);\n      }\n    })();\n  }, []);\n\n  useEffect(() => {\n    LocalStorage.setItem(\"savedChats\", JSON.stringify(data));\n  }, [data]);\n\n  const add = useCallback(\n    async (chat: Chat) => {\n      const toast = await showToast({\n        title: \"Saving your answer...\",\n        style: Toast.Style.Animated,\n      });\n      const newSavedChat: SavedChat = { ...chat, saved_at: new Date().toISOString() };\n      setData([...data, newSavedChat]);\n      toast.title = \"Answer saved!\";\n      toast.style = Toast.Style.Success;\n    },\n    [setData, data]\n  );\n\n  const remove = useCallback(\n    async (chat: Chat) => {\n      const toast = await showToast({\n        title: \"Unsaving your answer...\",\n        style: Toast.Style.Animated,\n      });\n      const newSavedChats = data.filter((savedAnswer) => savedAnswer.id !== chat.id);\n      setData(newSavedChats);\n      toast.title = \"Answer unsaved!\";\n      toast.style = Toast.Style.Success;\n    },\n    [setData, data]\n  );\n\n  const clear = useCallback(async () => {\n    const toast = await showToast({\n      title: \"Clearing your saved answers...\",\n      style: Toast.Style.Animated,\n    });\n    setData([]);\n    toast.title = \"Saved answers cleared!\";\n    toast.style = Toast.Style.Success;\n  }, [setData]);\n\n  return useMemo(() => ({ data, isLoading, add, remove, clear }), [data, isLoading, add, remove, clear]);\n}\n", "import { List } from \"@raycast/api\";\nimport { Chat } from \"../type\";\n\nexport const AnswerDetailView = (props: { chat: Chat; streamData?: Chat | undefined }) => {\n  const { chat, streamData } = props;\n  const isStreaming = streamData && streamData.id === chat.id;\n\n  const markdown = `${isStreaming ? streamData?.answer : chat.answer}`;\n\n  return <List.Item.Detail markdown={markdown} />;\n};\n"],
  "mappings": "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",
  "names": ["saved_exports", "__export", "Saved", "__toCommonJS", "import_api", "import_react", "import_api", "import_jsx_runtime", "CopyToClipboardAction", "props", "DestructiveAction", "icon", "title", "dialog", "onAction", "shortcut", "import_api", "import_jsx_runtime", "CopyActionSection", "question", "answer", "CopyToClipboardAction", "import_api", "import_jsx_runtime", "PreferencesActionSection", "import_api", "import_react", "useSavedChat", "data", "setData", "isLoading", "setLoading", "storedSavedChats", "previous", "add", "chat", "toast", "newSavedChat", "remove", "newSavedChats", "savedAnswer", "clear", "import_api", "import_jsx_runtime", "AnswerDetailView", "props", "chat", "streamData", "markdown", "import_jsx_runtime", "Saved", "savedChat", "useSavedChat", "searchText", "setSearchText", "selectedAnswerId", "setSelectedAnswerId", "getActionPanel", "chat", "CopyActionSection", "DestructiveAction", "PreferencesActionSection", "filteredSavedChats", "a", "b", "value", "index", "self", "answer", "id", "AnswerDetailView"]
}
